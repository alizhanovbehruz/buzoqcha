from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from infos.models import City, Region

reg_again = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞", callback_data='Vetdoktor_')
        ],
        [
            InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', url='https://t.me/alizhanovbekhruz')
        ]
    ]
)

add_clinic_keyb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ö–ª–∏–Ω–∏–∫—É/–í–µ—Ç–ê–ø—Ç–µ–∫—É/–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é', callback_data='addclinc_')
        ]
    ]
)


def let_keyb(id):
    keyb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='Ijozat berish', callback_data=f'letTre||{id}')
            ]
        ]
    )
    return keyb


def City_keyb(call_data):
    keyb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=i.name, callback_data=f'{call_data}_{i.id}')
            ] for i in City.objects.all()
        ]
    )
    return keyb


truefalse_keyb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–î–∞', callback_data='trueflse_true'),
            InlineKeyboardButton(text='–ù–µ—Ç', callback_data='trueflse_false')
        ]
    ]
)


async def Region_keyb_petowner(id):
    keyb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=i.name, callback_data=f'reginpetru_{i.id}')
            ] for i in Region.objects.filter(city__id=id)
        ]
    )
    return keyb


async def Region_keyb(id, list_access):
    print(list_access)
    if map(lambda a: a.startswith(id), list_access) or True:
        keyb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚úÖ' + i.name, callback_data=f'regiondru_{i.id}')
                ] if (str(i.id) in list_access) else [
                    InlineKeyboardButton(text=i.name, callback_data=f'regiondru_{i.id}')
                ] for i in Region.objects.filter(city__id=id)
            ]
        )
    else:
        keyb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=i.name, callback_data=f'regiondru_{i.id}')
                ] for i in Region.objects.filter(city__id=id)
            ]
        )
    keyb.inline_keyboard.append([InlineKeyboardButton(text="‚¨Ö–ù–∞–∑–∞–¥", callback_data="regiondru_back"),
                                 InlineKeyboardButton(text='üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—åüíæ', callback_data=f'regiondru_save')])
    return keyb


async def Region_keyb_update(id, list_access):
    print(list_access)
    if map(lambda a: a.startswith(id), list_access) or True:
        keyb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚úÖ' + i.name, callback_data=f'regiondru_{i.id}')
                ] if (i.id in list_access) else [
                    InlineKeyboardButton(text=i.name, callback_data=f'regiondru_{i.id}')
                ] for i in Region.objects.filter(city__id=id)
            ]
        )
    else:
        keyb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=i.name, callback_data=f'regiondru_{i.id}')
                ] for i in Region.objects.filter(city__id=id)
            ]
        )
    keyb.inline_keyboard.append([InlineKeyboardButton(text='üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—åüíæ', callback_data=f'regiondru_save')])
    return keyb


async def type_cl(data, reply_keyb):
    list_inlin = reply_keyb['inline_keyboard']
    remove_list = False
    for keyb in range(len(list_inlin)):
        if list_inlin[keyb][0]['callback_data'] == data:
            if list_inlin[keyb][0]['text'].startswith('‚úÖ'):
                remove_list = list_inlin[keyb][0]['callback_data'].split('_')[1]
                list_inlin[keyb][0]['text'] = list_inlin[keyb][0]['text'][1:]
            else:
                list_inlin[keyb][0]['text'] = '‚úÖ' + list_inlin[keyb][0]['text']
            break
    return (InlineKeyboardMarkup(inline_keyboard=list_inlin), remove_list)


typework_ = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä', callback_data='Vetdoktor_')
        ],
        [
            InlineKeyboardButton(text='–í–ª–∞–¥–µ–ª–µ—Ü –∂–∏–≤–æ—Ç–Ω–æ–≥–æ', callback_data='Petowner_')
        ],
    ],
)

doctor_editing_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='üìù–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data='doctoreditinru_')
        ],
        [
            InlineKeyboardButton(text='üìù–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –∏–ª–∏ –í–µ—Ç –∞–ø—Ç–µ–∫–∏', callback_da0ta='cliniceditinru_')
        ]
    ]
)


def clinic_editing(obj):
    if obj:
        inline_keyboard = [
            [
                InlineKeyboardButton(text=i.name, callback_data=f'anythingddddd'),
                InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å', callback_data=f'cliniceditingdeleru_{i.id}'),
                InlineKeyboardButton(text='üîÑ–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f'cliniceditingeru_{i.id}'),
            ] for i in obj
        ]
    else:
        inline_keyboard = [
            [
                InlineKeyboardButton(text='Sizda Klinika yoq', callback_data='anythingddddd'),
            ]
        ]
    inline_keyboard.append([InlineKeyboardButton(text='üÜïQo\'shish', callback_data='cliniceditingaru_')])
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


doctor_editing_menu_into = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='üìù–§–ò–û', callback_data='doctoreditingfru_')
        ],
        [
            InlineKeyboardButton(text='üìù–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='doctoreditingphoru_')
        ],
        [
            InlineKeyboardButton(text='üìù–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', callback_data='doctoreditingphoru_')
        ],
        [
            InlineKeyboardButton(text='üìù–û–ø–∏—Å–∞–Ω–∏–µ', callback_data='doctoreditingderu_')
        ],
        [
            InlineKeyboardButton(text='üìù–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–∏—Å–∞:', callback_data='doctoreditinglocatiru_')
        ],
    ]
)

type_vet_clinic = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='üíä–í–µ—Ç –ê–ø—Ç–µ–∫–∞', callback_data='typvetklinru_VT')
        ],
        [
            InlineKeyboardButton(text='üè•–ö–ª–∏–Ω–∏–∫–∞', callback_data='typvetklinru_KL')
        ],
        [
            InlineKeyboardButton(text='üè•–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', callback_data='typvetklinru_LB')
        ],
    ]
)


def clinic_editing_menu_into(id_clin):
    keyb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='üìù–ù–∞–∑–≤–∞–Ω–∏–µ ', callback_data=f'cliniceditingnamru_{id_clin}')
            ],
            [
                InlineKeyboardButton(text='üìù–û–±–ª–∞—Å—Ç—å', callback_data=f'cliniceditingcitru_{id_clin}')
            ],
            [
                InlineKeyboardButton(text='üìù–ê–¥—Ä–µ—Å', callback_data=f'cliniceditinglocatioru_{id_clin}')
            ],
            [
                InlineKeyboardButton(text='üìù–§–æ—Ç–æ', callback_data=f'cliniceditingphotru_{id_clin}')
            ],
            [
                InlineKeyboardButton(text='üìù–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'cliniceditingdesru_{id_clin}')
            ],
        ]
    )
    return keyb
