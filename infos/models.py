from django.db import models
from django.dispatch import receiver
from django.db.models.signals import post_save, Signal
from django.utils.translation import gettext_lazy


class StatusManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(status=True)


class Users(models.Model):
    class Type(models.TextChoices):
        DOKTOR = 'DR', 'Doktor'
        OWNER = 'OE', 'Owner'

    chat_id = models.BigIntegerField(unique=True)
    username = models.CharField(max_length=255, null=True, blank=True)
    full_name = models.CharField(max_length=255, null=True, blank=True)
    time_created = models.DateTimeField(auto_now_add=True)
    type_person = models.CharField(max_length=2, choices=Type.choices, default=Type.OWNER)
    status_doc = models.BooleanField(default=False)

    objects = models.Manager()

    def __str__(self):
        return self.username or self.full_name

    class Meta:
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        verbose_name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'


class City(models.Model):
    name = models.CharField(max_length=100)

    objects = models.Manager()

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ì–æ—Ä–æ–¥'
        verbose_name_plural = '–ì–æ—Ä–æ–¥'


class Region(models.Model):
    city = models.ForeignKey(City, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)

    objects = models.Manager()

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–†–µ–≥–∏–æ–Ω'
        verbose_name_plural = '–†–µ–≥–∏–æ–Ω'


class Doctor(models.Model):
    user = models.OneToOneField(Users, on_delete=models.CASCADE, related_name='doctor')
    work_region = models.ManyToManyField(Region, related_name='region_set', blank=True, null=True)
    full_name = models.CharField(max_length=255)
    phone = models.CharField(max_length=255)
    username = models.CharField(max_length=255, null=True, blank=True)
    photo = models.ImageField(upload_to='doctors/%Y/%m/%d', null=True, blank=True)
    status = models.BooleanField(default=False)
    clinic_bool = models.BooleanField(default=False)
    description = models.TextField(null=True, blank=True)
    description_ru = models.TextField(null=True, blank=True)

    objects = models.Manager()
    accessed_doc = StatusManager()

    def __str__(self):
        return self.full_name

    class Meta:
        verbose_name = '–î–æ–∫—Ç–æ—Ä'
        verbose_name_plural = '–î–æ–∫—Ç–æ—Ä'


class clinic(models.Model):
    class Type(models.TextChoices):
        VETAPTEKA = 'VT', 'VetApteka'
        KLINIKA = 'KL', 'Klinika'
        LABORATORIYA = 'LB', 'Laboratoriya'

    type_clinic = models.CharField(max_length=2, choices=Type.choices, default=Type.KLINIKA)
    name = models.CharField(max_length=100)
    region = models.ForeignKey(City, on_delete=models.CASCADE)
    longitude = models.FloatField()
    latitude = models.FloatField()
    photo = models.ImageField(upload_to='clinic/%Y/%m/%d', null=True, blank=True)
    owner = models.ForeignKey(Doctor, on_delete=models.CASCADE, related_name='clinic_set')
    description = models.TextField(null=True, blank=True)
    description_ru = models.TextField(null=True, blank=True)


    objects = models.Manager()

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ö–ª–∏–Ω–∏–∫–∞'
        verbose_name_plural = '–ö–ª–∏–Ω–∏–∫–∞'


class Admin_bot(models.Model):
    name = models.CharField(max_length=100, default='Nurmuxammad')
    chat_id = models.BigIntegerField()

    class Meta:
        indexes = [
            models.Index(fields=['chat_id', ]),
        ]
        verbose_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
        verbose_name_plural = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"

    def __str__(self):
        return self.name
# class Head(models.Model):
#     name = models.CharField(max_length=250)
#     description = models.TextField(null=True, blank=True)
#
#     def __str__(self):
#         return self.name
#
#     class Meta:
#         verbose_name = '–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é'
#         verbose_name_plural = '–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é'
#
#
# class detail(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set')
#     keys_text = models.CharField(max_length=250, null=True, blank=True, verbose_name='–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')
#     description = models.TextField(null=True, blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#     url = models.URLField(verbose_name='–°—Å—ã–ª–∫–∞')
#
#     def __str__(self):
#         return self.description
#
#     class Meta:
#         verbose_name = '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —á–∏—Ç–∞—Ç—å'
#         verbose_name_plural = '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —á–∏—Ç–∞—Ç—å'
#
#
# class about(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set_about')
#     name = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
#     description = models.TextField(null=True, blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#
#     def __str__(self):
#         return self.name
#
#     class Meta:
#         verbose_name = '–û –ø—Ä–æ–µ–∫—Ç–µ'
#         verbose_name_plural = '–û –ø—Ä–æ–µ–∫—Ç–µ'
#
#
# class questions(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set_questions', null=True, blank=True)
#     description = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
#     faq_text = models.TextField(verbose_name='–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
#     let_text = models.TextField('–∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç')
#     doctors_ques = models.TextField(null=True, blank=True, verbose_name='–î—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã')
#     keyb_quest = models.TextField(null=True, blank=True, verbose_name='–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')
#
#     def __str__(self):
#         return self.description
#
#     class Meta:
#         verbose_name = '–í–æ–ø—Ä–æ—Å—ã'
#         verbose_name_plural = '–í–æ–ø—Ä–æ—Å—ã'
#
#
# class cat_offline(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set_cat_offline', null=True, blank=True)
#     name = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∏)')
#     description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#     sub_desc = models.TextField(null=True, verbose_name='–ü–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ')
#     photo = models.ImageField(upload_to=f'%Y/%m/%d')
#
#     def __str__(self):
#         return self.name
#
#     class Meta:
#         verbose_name = '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
#         verbose_name_plural = '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
#
#
# class sub_cat_offline(models.Model):
#     cat = models.ForeignKey(cat_offline, on_delete=models.CASCADE, related_name='cat_offline_set')
#     name = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∏)')
#
#     def __str__(self):
#         return self.cat.name + ' : ' + self.name
#
#     class Meta:
#         verbose_name = '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
#         verbose_name_plural = '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
#
#
# class doctors(models.Model):
#     choise_type = (
#         ('online', 'Online'),
#         ('offline', 'Offline'),
#         ('online/offline', 'Online/Offline'),
#     )
#     choise_consult = (
#         ('calls', 'Calls'),
#         ('chat', 'Chat'),
#         ('calls/chat', 'Calls/Chat'),
#     )
#     prof = models.CharField(max_length=150, null=True, verbose_name='–ü—Ä–æ—Ñ–µ—Å—Å–∏—è')
#     user_id = models.BigIntegerField(default=511172905)
#     description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#     location = models.CharField(max_length=450, verbose_name='–ê–¥—Ä–µ—Å', null=True, blank=True)
#     cat_offline = models.ManyToManyField(sub_cat_offline, related_name='subcat_set',
#                                          verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏')
#     full_name = models.CharField(max_length=250, verbose_name='–§–ò–û')
#     work_type = models.TextField(max_length=150, choices=choise_type, default='online/offline',
#                                  verbose_name='–¢–∏–ø —Ä–∞–±–æ—Ç—ã')
#     consult_type = models.TextField(max_length=150, choices=choise_consult, default='calls/chat',
#                                     verbose_name='–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏')
#     offline_price = models.CharField(max_length=250, verbose_name='–¶–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏(–æ—Ñ—Ñ–ª–∞–π–Ω)', null=True, blank=True)
#     calls_price = models.CharField(max_length=350, verbose_name='–¶–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏(–∑–≤–æ–Ω–æ–∫/–≤–∏–¥–µ–æ)', null=True,
#                                    blank=True,
#                                    default='üíª –û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–∑–≤–æ–Ω–æ–∫/–≤–∏–¥–µ–æ) ‚Äì 20$‚åõÔ∏è30 –º–∏–Ω—É—Ç^^^üíª Onlayn maslahat (qo\'ng\'iroq/video) ‚Äì 20$‚åõÔ∏è30 daqiqa')
#     chat_price = models.CharField(max_length=350, default="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ —á–∞—Ç–µ ‚Äì 14$ ^^^üí¨ Chatda maslahat ‚Äì $14",
#                                   verbose_name='–¶–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏(—á–∞—Ç)', null=True, blank=True)
#     online_price = models.CharField(max_length=250, verbose_name='–¶–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏(–æ–Ω–ª–∞–π–Ω)', null=True, blank=True)
#     image = models.ImageField(upload_to='doctors/%Y/%m/%d')
#
#     def __str__(self):
#         return self.full_name
#
#     class Meta:
#         verbose_name = '–î–æ–∫—Ç–æ—Ä–∞'
#         verbose_name_plural = '–î–æ–∫—Ç–æ—Ä–∞'
#
#
# class Payment(models.Model):
#     name_provider = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã')
#     token = models.CharField(max_length=250, verbose_name='–¢–æ–∫–µ–Ω')
#
#     def __str__(self):
#         return self.name_provider
#
#     class Meta:
#         verbose_name = '–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'
#         verbose_name_plural = '–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'
#
#
# class admin_info(models.Model):
#     user_id = models.BigIntegerField()
#     full_name = models.CharField(max_length=250, null=True, blank=True, verbose_name='–§–ò–û')
#     username = models.CharField(max_length=250, null=True, blank=True)
#
#     def __str__(self):
#         return self.full_name
#
#     class Meta:
#         verbose_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'
#         verbose_name_plural = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'
#
#
# class pacient_info(models.Model):
#     choises = (
#         ('dates', 'Dates'),
#         ('question', 'Question')
#     )
#     doctor = models.ForeignKey(doctors, on_delete=models.PROTECT, null=True, blank=True)
#     cause = models.TextField(verbose_name='–ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç')
#     full_name = models.TextField(max_length=250, verbose_name='–§–∏–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞')
#     age = models.TextField(verbose_name='–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞')
#     phone = models.TextField(verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
#     total = models.TextField(null=True, blank=True, verbose_name='–í—Å–µ–≥–æ')
#     type = models.CharField(max_length=50, choices=choises, default='dates', verbose_name='–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö')
#     time_created = models.DateTimeField(auto_now_add=True, verbose_name='–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è')
#     type_consult = models.CharField(max_length=50, null=True, blank=True, verbose_name='–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏')
#     status = models.BooleanField(verbose_name='–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', default=False)
#
#     def __str__(self):
#         return self.type + ' ' + str(self.doctor)
#
#     class Meta:
#         verbose_name = '–ü–∞—Ü–∏–µ–Ω—Ç—ã'
#         verbose_name_plural = '–ü–∞—Ü–∏–µ–Ω—Ç—ã'
#
#
# class payment_history(models.Model):
#     user_id = models.BigIntegerField(default=511172905)
#     amount = models.CharField(default='0',
#                               max_length=250, verbose_name='–°—É–º–º–∞')
#     status = models.BooleanField(default=False, verbose_name='–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã')
#     time_created = models.DateTimeField(auto_now_add=True, verbose_name='–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è')
#
#     def __str__(self):
#         return f"{self.amount}, {self.user_id}"
#
#     class Meta:
#         verbose_name = '–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç—ã'
#         verbose_name_plural = '–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç—ã'
#
#
# class laboratory_analice(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set_lab', null=True, blank=True)
#     name = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
#     description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#     photo = models.ImageField(upload_to='lab/%Y/%m/%d', null=True, blank=True)
#     keyb_text = models.CharField(max_length=250, verbose_name="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
#                                  null=True, blank=True, default='–û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps')
#     longit = models.CharField(max_length=250, null=True, blank=True)
#     latit = models.CharField(max_length=250, null=True, blank=True)
#
#     def __str__(self):
#         return self.name
#
#     class Meta:
#         verbose_name = '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è'
#         verbose_name_plural = '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è'
#
#
# class recomended_centers(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set_recomended_centers', null=True,
#                              blank=True)
#     name = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
#     description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#     photo = models.ImageField(upload_to='lab/%Y/%m/%d', null=True, blank=True)
#     keyb_text = models.CharField(max_length=250, null=True, verbose_name="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
#                                  blank=True, default='–û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps')
#     longit = models.CharField(max_length=250, null=True, blank=True)
#     latit = models.CharField(max_length=250, null=True, blank=True)
#
#     def __str__(self):
#         return self.name
#
#     class Meta:
#         verbose_name = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–Ω—Ç—Ä—ã'
#         verbose_name_plural = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–Ω—Ç—Ä—ã'
#
#
# class mskt_book(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set_mskt_book', null=True,
#                              blank=True)
#     name = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
#     description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#     photo = models.ImageField(upload_to='lab/%Y/%m/%d', null=True, blank=True)
#     keyb_text = models.CharField(max_length=250, verbose_name="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
#                                  null=True, blank=True, default='–û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps')
#     longit = models.CharField(max_length=250, null=True, blank=True)
#     latit = models.CharField(max_length=250, null=True, blank=True)
#
#     def __str__(self):
#         return self.name
#
#     class Meta:
#         verbose_name = '–ú–°–ö–¢'
#         verbose_name_plural = '–ú–°–ö–¢'
#
#
# class connect_admin(models.Model):
#     head = models.ForeignKey(Head, on_delete=models.CASCADE, related_name='head_set_connect_admin', null=True,
#                              blank=True)
#     description = models.CharField(max_length=250, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
#     url = models.URLField()
#     keyb_text = models.CharField(max_length=250, null=True, blank=True, verbose_name='–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')
#
#     class Meta:
#         verbose_name = '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
#         verbose_name_plural = '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
#
#
# class another_text(models.Model):
#     start_text = models.TextField(default='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ TezShifo!\n'
#                                           '–ú—ã –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥–æ–º—É.',
#                                   verbose_name='–¢–µ–∫—Å—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
#     back = models.CharField(max_length=250, verbose_name='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
#     previous = models.CharField(max_length=250, verbose_name='–ù–∞–∑–∞–¥')
#     select_doctor = models.CharField(max_length=250)
#     ask_question = models.CharField(max_length=250, verbose_name='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
#                                     default='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
#     share_contact = models.CharField(max_length=250, default='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º',
#                                      verbose_name='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º')
#     warning_text = models.TextField(default=f"–≤—ã –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é "
#                                             f"–Ω–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ß—Ç–æ –≤–∞—Å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ? "
#                                             f"–í—ã –º–æ–≥–ª–∏ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞?"
#                                             f"^^^siz arizani to'ldirishni boshladingiz, lekin hech qachon "
#                                             f"biz bilan maslahatlashmagan mutaxassis Sizni nima to'xtatdi?"
#                                             f" Siz Bu haqda operatorga yoza olasizmi? muammo?",
#                                     verbose_name='–¢–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è')
#     warning_keyb = models.TextField(
#         default='–ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏^^^Operatorga yozish\nArizani bekor qilish',
#         verbose_name='–ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è')
#
#     class Meta:
#         verbose_name = '–î—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã'
#         verbose_name_plural = '–î—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã'
#
#
# class Group_info(models.Model):
#     name = models.CharField(max_length=250, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')
#     group_id = models.BigIntegerField(verbose_name='ID –≥—Ä—É–ø–ø—ã')
#     link_group = models.CharField(max_length=350, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É',
#                                   default='https://t.me/+q1L8DFcf0UplZWVi')
#     time_created = models.DateTimeField(auto_now_add=True, verbose_name='–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è')
#     status_working = models.BooleanField(default=False, verbose_name='–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã')
#     doctor_user_id = models.CharField(max_length=250, null=True, blank=True, verbose_name='ID –¥–æ–∫—Ç–æ—Ä–∞')
#     pacient_userid = models.CharField(max_length=250, null=True, blank=True, verbose_name='ID –ø–∞—Ü–∏–µ–Ω—Ç–∞')
#     users_id = models.CharField(max_length=250, null=True, blank=True, verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
#     description = models.TextField(null=True, blank=True, default='–∞–¥–º–∏–Ω –¥–æ–±–∞–≤—å!!!', verbose_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
#
#     def __str__(self):
#         return self.name
#
#     class Meta:
#         verbose_name = '–ì—Ä—É–ø–ø—ã'
#         verbose_name_plural = '–ì—Ä—É–ø–ø—ã'
